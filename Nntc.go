package main

import (
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"strconv"
	"time"
)

type AutoGenerated struct {
	Date   string `json:"date"`
	Ekran1 struct {
		Title string `json:"title"`
		Lines []struct {
			C1    string      `json:"c1"`
			C2    string      `json:"c2"`
			C3    interface{} `json:"c3,omitempty"`
			C4    interface{} `json:"c4,omitempty"`
			C5    interface{} `json:"c5,omitempty"`
			Class string      `json:"class,omitempty"`
		} `json:"lines"`
	} `json:"ekran1"`
	Ekran2 struct {
		Title string `json:"title"`
		Lines []struct {
			C1    string      `json:"c1"`
			C2    string      `json:"c2"`
			C3    interface{} `json:"c3,omitempty"`
			C4    interface{} `json:"c4,omitempty"`
			C5    interface{} `json:"c5,omitempty"`
			Class string      `json:"class,omitempty"`
		} `json:"lines"`
	} `json:"ekran2"`
	Rating1 struct {
		Title string `json:"title"`
		Lines []struct {
			Number     string      `json:"c1"`
			IssueNum   interface{} `json:"c2,omitempty"`
			AvgScore   string      `json:"c3,omitempty"`
			IsOriginal string      `json:"c4,omitempty"`
			Class      string      `json:"class,omitempty"`
		} `json:"lines"`
	} `json:"rating1"`
	Rating2 struct {
		Title string `json:"title"`
		Lines []struct {
			Number     string      `json:"c1"`
			IssueNum   interface{} `json:"c2,omitempty"`
			AvgScore   string      `json:"c3,omitempty"`
			IsOriginal string      `json:"c4,omitempty"`
			Class      string      `json:"class,omitempty"`
		} `json:"lines"`
	} `json:"rating2"`
}

func NntcHandler() string {
	numInt := float64(230713135742)
	ratings := AutoGenerated{}
	resp, err := http.Get(fmt.Sprintf("https://nntc.nnov.ru/pk/assets/data.json?t=%d", time.Now().Unix()))
	if err != nil {
		fmt.Println(err.Error())
	}
	body, _ := io.ReadAll(resp.Body)
	err = json.Unmarshal(body, &ratings)
	if err != nil {
		fmt.Println(err.Error())
	}
	var start int
	var stop int
	for k, v := range ratings.Rating1.Lines {
		if v.Number == "2.1.2.9" {
			start = k + 2
		}
		if v.Number == "2.1.2.10" {
			stop = k
		}
	}
	result := ratings.Rating1.Lines[start:stop]
	var original []struct {
		Number     string      `json:"c1"`
		IssueNum   interface{} `json:"c2,omitempty"`
		AvgScore   string      `json:"c3,omitempty"`
		IsOriginal string      `json:"c4,omitempty"`
		Class      string      `json:"class,omitempty"`
	}
	var avgScore float64
	for _, v := range result {
		if v.IssueNum == numInt {
			avgScore, _ = strconv.ParseFloat(v.AvgScore, 64)
		}
		if v.IsOriginal == "Да" {
			original = append(original, v)
		}
	}
	var rank int
	for k, v := range original {
		avgScoreFloat, _ := strconv.ParseFloat(v.AvgScore, 64)
		if avgScoreFloat < avgScore {
			rank = k + 1
			break
		}
	}

	return fmt.Sprintf("НРТК %d/%d", rank, len(original))
}
